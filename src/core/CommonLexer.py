# Generated from CommonLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
from typing import TextIO
import sys


def serializedATN():
    return [
        4,0,37,247,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,1,0,1,0,5,0,
        80,8,0,10,0,12,0,83,9,0,1,1,1,1,1,2,4,2,88,8,2,11,2,12,2,89,1,3,
        4,3,93,8,3,11,3,12,3,94,1,3,1,3,4,3,99,8,3,11,3,12,3,100,1,4,1,4,
        5,4,105,8,4,10,4,12,4,108,9,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,3,5,121,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,7,4,7,135,8,7,11,7,12,7,136,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
        1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
        1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,
        1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,
        1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
        1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,
        1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,
        1,36,1,36,1,36,1,37,4,37,242,8,37,11,37,12,37,243,1,37,1,37,1,106,
        0,38,1,1,3,0,5,2,7,3,9,4,11,5,13,6,15,7,17,8,19,9,21,10,23,11,25,
        12,27,13,29,14,31,15,33,16,35,17,37,18,39,19,41,20,43,21,45,22,47,
        23,49,24,51,25,53,26,55,27,57,28,59,29,61,30,63,31,65,32,67,33,69,
        34,71,35,73,36,75,37,1,0,4,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
        95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,253,0,1,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
        0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
        0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,
        0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,
        0,0,0,1,77,1,0,0,0,3,84,1,0,0,0,5,87,1,0,0,0,7,92,1,0,0,0,9,102,
        1,0,0,0,11,120,1,0,0,0,13,122,1,0,0,0,15,134,1,0,0,0,17,138,1,0,
        0,0,19,143,1,0,0,0,21,147,1,0,0,0,23,153,1,0,0,0,25,160,1,0,0,0,
        27,168,1,0,0,0,29,173,1,0,0,0,31,178,1,0,0,0,33,180,1,0,0,0,35,182,
        1,0,0,0,37,184,1,0,0,0,39,186,1,0,0,0,41,188,1,0,0,0,43,190,1,0,
        0,0,45,192,1,0,0,0,47,194,1,0,0,0,49,196,1,0,0,0,51,200,1,0,0,0,
        53,203,1,0,0,0,55,211,1,0,0,0,57,214,1,0,0,0,59,219,1,0,0,0,61,222,
        1,0,0,0,63,224,1,0,0,0,65,227,1,0,0,0,67,229,1,0,0,0,69,231,1,0,
        0,0,71,234,1,0,0,0,73,237,1,0,0,0,75,241,1,0,0,0,77,81,7,0,0,0,78,
        80,7,1,0,0,79,78,1,0,0,0,80,83,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,
        0,82,2,1,0,0,0,83,81,1,0,0,0,84,85,7,2,0,0,85,4,1,0,0,0,86,88,3,
        3,1,0,87,86,1,0,0,0,88,89,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,
        6,1,0,0,0,91,93,3,3,1,0,92,91,1,0,0,0,93,94,1,0,0,0,94,92,1,0,0,
        0,94,95,1,0,0,0,95,96,1,0,0,0,96,98,5,46,0,0,97,99,3,3,1,0,98,97,
        1,0,0,0,99,100,1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,8,1,0,
        0,0,102,106,5,34,0,0,103,105,9,0,0,0,104,103,1,0,0,0,105,108,1,0,
        0,0,106,107,1,0,0,0,106,104,1,0,0,0,107,109,1,0,0,0,108,106,1,0,
        0,0,109,110,5,34,0,0,110,10,1,0,0,0,111,112,5,116,0,0,112,113,5,
        114,0,0,113,114,5,117,0,0,114,121,5,101,0,0,115,116,5,102,0,0,116,
        117,5,97,0,0,117,118,5,108,0,0,118,119,5,115,0,0,119,121,5,101,0,
        0,120,111,1,0,0,0,120,115,1,0,0,0,121,12,1,0,0,0,122,123,3,3,1,0,
        123,124,3,3,1,0,124,125,3,3,1,0,125,126,3,3,1,0,126,127,5,45,0,0,
        127,128,3,3,1,0,128,129,3,3,1,0,129,130,5,45,0,0,130,131,3,3,1,0,
        131,132,3,3,1,0,132,14,1,0,0,0,133,135,3,3,1,0,134,133,1,0,0,0,135,
        136,1,0,0,0,136,134,1,0,0,0,136,137,1,0,0,0,137,16,1,0,0,0,138,139,
        5,110,0,0,139,140,5,117,0,0,140,141,5,108,0,0,141,142,5,108,0,0,
        142,18,1,0,0,0,143,144,5,105,0,0,144,145,5,110,0,0,145,146,5,116,
        0,0,146,20,1,0,0,0,147,148,5,102,0,0,148,149,5,108,0,0,149,150,5,
        111,0,0,150,151,5,97,0,0,151,152,5,116,0,0,152,22,1,0,0,0,153,154,
        5,115,0,0,154,155,5,116,0,0,155,156,5,114,0,0,156,157,5,105,0,0,
        157,158,5,110,0,0,158,159,5,103,0,0,159,24,1,0,0,0,160,161,5,98,
        0,0,161,162,5,111,0,0,162,163,5,111,0,0,163,164,5,108,0,0,164,165,
        5,101,0,0,165,166,5,97,0,0,166,167,5,110,0,0,167,26,1,0,0,0,168,
        169,5,108,0,0,169,170,5,111,0,0,170,171,5,110,0,0,171,172,5,103,
        0,0,172,28,1,0,0,0,173,174,5,100,0,0,174,175,5,97,0,0,175,176,5,
        116,0,0,176,177,5,101,0,0,177,30,1,0,0,0,178,179,5,42,0,0,179,32,
        1,0,0,0,180,181,5,64,0,0,181,34,1,0,0,0,182,183,5,40,0,0,183,36,
        1,0,0,0,184,185,5,41,0,0,185,38,1,0,0,0,186,187,5,58,0,0,187,40,
        1,0,0,0,188,189,5,44,0,0,189,42,1,0,0,0,190,191,5,59,0,0,191,44,
        1,0,0,0,192,193,5,63,0,0,193,46,1,0,0,0,194,195,5,126,0,0,195,48,
        1,0,0,0,196,197,5,97,0,0,197,198,5,110,0,0,198,199,5,100,0,0,199,
        50,1,0,0,0,200,201,5,111,0,0,201,202,5,114,0,0,202,52,1,0,0,0,203,
        204,5,98,0,0,204,205,5,101,0,0,205,206,5,116,0,0,206,207,5,119,0,
        0,207,208,5,101,0,0,208,209,5,101,0,0,209,210,5,110,0,0,210,54,1,
        0,0,0,211,212,5,105,0,0,212,213,5,110,0,0,213,56,1,0,0,0,214,215,
        5,108,0,0,215,216,5,105,0,0,216,217,5,107,0,0,217,218,5,101,0,0,
        218,58,1,0,0,0,219,220,5,105,0,0,220,221,5,115,0,0,221,60,1,0,0,
        0,222,223,5,61,0,0,223,62,1,0,0,0,224,225,5,33,0,0,225,226,5,61,
        0,0,226,64,1,0,0,0,227,228,5,60,0,0,228,66,1,0,0,0,229,230,5,62,
        0,0,230,68,1,0,0,0,231,232,5,60,0,0,232,233,5,61,0,0,233,70,1,0,
        0,0,234,235,5,62,0,0,235,236,5,61,0,0,236,72,1,0,0,0,237,238,5,60,
        0,0,238,239,5,60,0,0,239,74,1,0,0,0,240,242,7,3,0,0,241,240,1,0,
        0,0,242,243,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,245,1,0,
        0,0,245,246,6,37,0,0,246,76,1,0,0,0,9,0,81,89,94,100,106,120,136,
        243,1,6,0,0
    ]

class CommonLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IDENTIFIER = 1
    INT = 2
    FLOAT = 3
    STRING = 4
    BOOLEAN = 5
    DATE = 6
    LONG = 7
    NULL = 8
    INT_TYPE = 9
    FLOAT_TYPE = 10
    STRING_TYPE = 11
    BOOLEAN_TYPE = 12
    LONG_TYPE = 13
    DATE_TYPE = 14
    PK = 15
    FK = 16
    LPAREN = 17
    RPAREN = 18
    COLON = 19
    COMMA = 20
    SEMI = 21
    QUESTION = 22
    TILDE = 23
    AND = 24
    OR = 25
    BETWEEN = 26
    IN = 27
    LIKE = 28
    IS = 29
    EQ = 30
    NEQ = 31
    LT = 32
    GT = 33
    LE = 34
    GE = 35
    SLF = 36
    WS = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'null'", "'int'", "'float'", "'string'", "'boolean'", "'long'", 
            "'date'", "'*'", "'@'", "'('", "')'", "':'", "','", "';'", "'?'", 
            "'~'", "'and'", "'or'", "'between'", "'in'", "'like'", "'is'", 
            "'='", "'!='", "'<'", "'>'", "'<='", "'>='", "'<<'" ]

    symbolicNames = [ "<INVALID>",
            "IDENTIFIER", "INT", "FLOAT", "STRING", "BOOLEAN", "DATE", "LONG", 
            "NULL", "INT_TYPE", "FLOAT_TYPE", "STRING_TYPE", "BOOLEAN_TYPE", 
            "LONG_TYPE", "DATE_TYPE", "PK", "FK", "LPAREN", "RPAREN", "COLON", 
            "COMMA", "SEMI", "QUESTION", "TILDE", "AND", "OR", "BETWEEN", 
            "IN", "LIKE", "IS", "EQ", "NEQ", "LT", "GT", "LE", "GE", "SLF", 
            "WS" ]

    ruleNames = [ "IDENTIFIER", "DIGIT", "INT", "FLOAT", "STRING", "BOOLEAN", 
                  "DATE", "LONG", "NULL", "INT_TYPE", "FLOAT_TYPE", "STRING_TYPE", 
                  "BOOLEAN_TYPE", "LONG_TYPE", "DATE_TYPE", "PK", "FK", 
                  "LPAREN", "RPAREN", "COLON", "COMMA", "SEMI", "QUESTION", 
                  "TILDE", "AND", "OR", "BETWEEN", "IN", "LIKE", "IS", "EQ", 
                  "NEQ", "LT", "GT", "LE", "GE", "SLF", "WS" ]

    grammarFileName = "CommonLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


